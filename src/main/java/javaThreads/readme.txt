Всем бодрого духа! Хочу написать несколько слов о исключительно полезном ключевом слове synchronized в языке Java.
Многие начинающие разработчики сталкиваются с проблемой понимания функциональности этого ключевого слова и не могут
правильно его использовать и интерпретировать уже написанный код с использованием synchronized, да и как обычно все
усугубляет скудное количество русскоязычной документации.

Итак, случается, что ваша программа не может обойтись без параллельного выполнения каких либо задач. Например самый
очевидный случай, когда вы пишите сетевое приложение и подразумеваются, что им будут пользоваться несколько
пользователей одновременно. На первый взгляд никаких трудностей это не вызывает, но на практике есть несколько очень
неприятных моментов.

Начнем с примера. Допустим, вы пишите программу для банкомата. У вас есть 3 пользователя, у которых есть доступ к
одному и тому же счету. Конечно, хорошо, если они заходят снять деньги в разное время, но мы должны подумать о том,
что они могут захотеть снять деньги одновременно. Тут как раз и начинается самое интересное.

Будем считать, что для каждого из пользователей в нашей системе создается отдельный поток выполнения, т.е абстрактно
это выглядит так:

1. Пользователь подошел к банкомату и вставил карту - Мы создали поток
2. Вводится PIN код - делаем нужные проверки, и если все ОК, продолжаем
3. Выбирается сумма и нажимается кнопка “Получить деньги”
4. Вот здесь должно происходит списание денег со счета и их выдача, но есть НО...

... . Дело в том, что если больше одного пользователя одновременно придут в пункт 4, то может случится, что проверка
доступных средств на счете для всех выполнится одновременно, а не последовательно. Т.е система проверит что на счете
например 10 рублей, а пользователь хочет снять 5 рублей, а таких пользователей у нас 3. В итоге каждый снимет
по 5 рублей, и на счете будет минус 5. Как-то не круто.

Тут то к нам на помощь и приходит синхронизация доступа к данным. Как вы видите из примера, нам нужно как то заставить
всех пользователей выполнять их транзакции последовательно. Т.е мы должны проводить каждую следующую операцию со счетом,
только когда у нас завершена предыдущая.

В абстрактной схеме это будет выглядеть так:

1. Пользователь подошел к банкомату и встали карту - Мы создали поток
2. Вводится PIN код - делаем нужные проверки, и если все ОК, продолжаем
3. Выбирается сумма и нажимается кнопка “Получить деньги”
4. Проверяем, есть ли кто-нибудь, кто сейчас работает с нашим счетом
5. Если нет, тогда говорим что теперь мы заняли счет и проводим свою операцию
6. Если счет кем-то уже занят, мы просто встаем в очередь ожидающих доступа к счет и ждем
7. После получения доступа к счету, делаем все что нам нужно
6. После завершения своих операций со счетом, мы говорим, что мы освободили счет для других

Благодаря тому, что в Java все механизмы синхронизации уже сделаны за нас, нам нужно только указать в каком месте
нам требуется синхронный доступ к данным.

