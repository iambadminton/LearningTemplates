package javaThreads;

/**
 * Created by a.shipulin on 31.08.18.
 */
/*
Вот небольшая программка, в которой подробно прокомментированы все действия.
PS: Програмка действительно не большая, но обильное кол-во комментариев к ней, делает ее код довольно растянутым
*/

/**
 * Тестовый класс "Денежный счет" для объяснения функциональности ключевого слова "synchronized"
 *
 * Описание: Есть 3 человека, у которых есть доступ к 1 банковскому счету. На счете лежит 10 рублей.
 * Каждый из участников делает попытку снять 5 рублей со счета.
 *
 * Ожидаемый результат: 2 участника могут снять деньги, а 3ий получает сообщение о том, что денег недостаточно
 * Реальные возможные результаты:
 * а) Все 3ое смогут снять деньги.
 * 6) Смогут снять только 2ое
 *
 * Этот пример содержит 2 вспомогательных класса:
 *
 *
 * 1. CachePoint - класс для демонстарции корректно работающего банкомата (с исп. ключ. слова synchronized)
 * 2. BrokenCachePoint - класс для демонстрации неисправного банкомата
 *
 * В методе main проиллюстрировано 2 примера. Первый использует исправные банкоматы, второй - нет
 *
 * @author sandro
 * @version 1.0
 * @date 7/6/11
 */
public final class MoneyAccount {

    /**
     * Так как это денежный счет, он будет 1 для всех наших пользователей (смотреть "Singleton Pattern")
     * Переменная instance хранит ссылку на единственный экземпляр этого класса
     */
    private static MoneyAccount instance;

    /**
     * Количество денег на счете
     */
    private Integer account;

    /**
     * Инициализации счета. Указываем сколько у нас денег в самом начале
     * <p>
     * Замечание: Конструктор имеет приватную область видимости, так как мы должны гарантировать
     * что объект MoneyAccount в нашей системе будет существовать в единственном экземпляре
     */
    private MoneyAccount() {
        account = 10;
    }

    /**
     * Возвращает ссылку на наш денежный счет. При первом обращении создает единственный экземпляр счета.
     *
     * @return Ссылка на MoneyAccount
     */
    public static MoneyAccount getInstance() {
        if (instance == null) {
            instance = new MoneyAccount();
        }
        return instance;
    }

    /**
     * Снимает указанное количество денег со счета.
     *
     * @param amount Сколько денег снимаем
     */
    public void cache(final int amount) {
        account -= amount;
    }

    /**
     * Показывает сколкьо сейчас денег на счете
     *
     * @return Кол-во денег
     */
    public Integer getAccount() {
        return account;
    }
}

